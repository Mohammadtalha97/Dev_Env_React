-> Transpile : babel
-> Bundle : Webpack
-> Lint : ESLint
-> Web Server : Webpack
-> Generating index.html : Webpack
-> Loading changes on save : Webpack
-> One command via npm scripts!


(1)src/index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Document</title>
</head>
<body>
    <div id="app"></div>
</body>
</html>



(2)index.js
import React from "react";
import { render } from "react-dom";

const Hi = () => {
  return <h1>Talha</h1>;
};

render(<Hi />, document.getElementById("app"));






(3)webpack.config.dev.js : webpack is for bundling


const webpack = require("webpack");
const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");

process.env.NODE_ENV = "development"; //for babel to know

module.exports = {
  mode: "development", //set node_env to development and disable production fetures
  target: "web",
  devTool: "cheap-module-source-map", //we can see original code in browser
  entry: "./src/index",
  //it put our app in memory
  output: {
    path: path.resolve(__dirname, "build"),
    punlicpah: "/", //public url of output directory when it reference in browser
    filename: "bundle.js", //it is reference to HTML serves from memory
  },

  //webpack server in development setting
  devServer: {
    stats: "minimal", //status in cmd is minimun short and noiseless
    overlay: true, //overlay any error which occures in browser
    historyApiFallback: true, //all request sent to index.html - handle by react router
    //opem issue in webpack due to lattest version of chrome
    disableHostCheck: true,
    headers: { "Access-Control-Allow-Origin": "*" },
    https: false,
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: "src/index.html", //where to look for file
      favicon: "src/favicon.ico",
    }),
  ],
  module: {
    //what files we want to handle
    rules: [
      {
        test: /\.(js|jsx)$/, //find js or jsx file
        exclude: /node_modules/, //ignore it
        use: ["babel-loader"], //what to do with the file, babel run in all our js and webpack bundle that for us
      },
      {
        test: /(\.css)$/,
        use: ["style-loader", "css-loader"], //allow us to import css and webpack bundle css into single file
      },
    ],
  },
};




(4)babel(js compiler) : for transcripting, morden js features into browser can undestand


-> can be configure using .babelrc || package.json				

"babel": {
	"presets": [
		"babel-preset-react-app"
	]
}



-> babel-preset-react-app :  it will tell babel to convert JSX and modern js features like {...}, imports etc..





(5)npm script

- package.json

 "scripts": {
    "start": "webpack-dev-server --config webpack.config.dev.js --port 3000"
  },






(6)Eslint : show us errors

-> when we hit save it run 

"eslintConfig": {

	//recommended rules implement automatically
	//import a file which doesn't exists
    "extends": [
      "eslint:recommended",
      "plugin:react/recommended",
      "plugin:import/errors",
      "plugin:import/warnings"
    ],

    //to eslint undestand our code 
    "parser": "babel-eslint",

    //using jsx because of react
    "parserOptions": {
      "ecmaVersion": 2018,
      "sourceType": "module",
      "ecmaFeatures": {
        "jsx": true
      }
    },

    //our working env
    //eslint undestand global variables from this env
    "env": {
      "browser": true,
      "node": true,
      "es6": true,
      "jest": true
    },

    //override default rules
    "rules": {
      "no-debugger": "off",
      "no-console": "off",
      "no-unused-vars": "warn",
      "react/prop-types": "warn"
    },

    //required by eslint-plugin-react
    //detech the version of react we are using otherwise give error : react version not specify

    "settings": {
      "react": {
        "version": "detect"
      }
    },

    //this is a root eslint config for project
    "root": true
  }




--> we can run eslint via CMD but let's run it via Webpack

	webpack.config.dev.js

	modules-> rules --> { 
		use: ["babel-loader", "eslint-loader"],
	}

--> now webpack will watch our files, recompile our code and run ESLint when we hit save.






--> NOW :  npm start


import React from "react";
import { render } from "react-dom";

myGlobal = 4;//throw error in cmd

const Hi = () => {
  return <h1>Talha</h1>;
};

render(<Hi />, document.getElementById("app"));





-----------------------
(*)Redux
-----------------------

-> sharing data in a complex app we use redux
-> Centralized store all app component can access it via dispatch action 

-> When it is Helpful..?:

    - complex data flows
    - inter-component communication[no parent-child relationship]
    - Non-hirerarchical data
    - Many actions[write,add,delete for complex Data Structures]
    - Same data in many places

  
-> 3 Principles:

    (1)One Immutable store [can not change directly but via actions]
    (2)Actions trigger changes
    (3)Reducers : state changes handle by pure function called reducers

  
-> Diffrences: [Flux and Redux]

    (1)Flux : unidirectional_data_flow,  centrazlied store(multiple), use actions for updating store
    (2)Redux : unidirectional_data_flow,  centrazlied store(single), use actions for updating store

    BUT,

    (2)Redux : 
      -Reducers:  it uses Reduces which is a pure function which take action and state and return new state
      -Containers: it is a React component contain neccessory logic which they passed to presentation(Dumb child) component via Props[easy to test, simple to use]
      -Immutability: Redux store is Immutable

    AND MORE ðŸ˜‹

    (1)FluxðŸ¥± :
      - Action --> Dispatcher --> Store --> React
      - Each store must connect to the dispatcher via eventEmitter

    (2)REDUXðŸ¤ª : 
      - Action --> Store --> React, 
      - Store --> Reducers, Reducers --> Store
      - It relays on reducers[pure function that's why it doesn't need dispatcher]
      - Each Action handle by 1 or more Reducer which update single Store
      - State is immutable in Redux, Reducers return new updated copy of the state which upate the store

    AND MORE ðŸ˜‹

    (1)Flux : 
      -Store: logic + state, multiple store[stores are disconnected], Mutable
      -Connection : React compo subscribe to stores
    (2)Redux : 
      -Store: logic[with reducers]  +  state, single store[single source of truth][connected with reducers], Immutable
      -Connection : Container components utilize connect


-------------------------------------
(*)Why State Is Immutable Is Redux 
-------------------------------------

-> Clarity: "in which file state update..ðŸ˜–", "it's in reducer stupid ðŸ˜†"

-> Performance:  
  - 1 complex object, if that was change redux need to check at every state but if new state than balle balle ðŸ’ƒ
  - reference comparition : if old state is not referencing to same object in memory which means state is changed and re-render component

-> Awesome Sauce: Redux developer tools[time-travel debugging, undo/redo]



----------------
(*)Note
----------------

-> react-redux library used to connect react with redux store
-> (1)Provider: Attaches app to store (2)Connect
-> (1)mapStateToProps : what part of a store we want to use in component as a Props
-> (2)mapDispatchToProps : what action do i want to pass as props
--> 

function mapDispatchToProps(dispatch){
  return{
    actions: bindActionCreators(actions, dispatch)
    //wraps action creator in dispatch call for you
  };
}



----------------------
(*)Chat with redux
----------------------

->React - hey courseAction, someone clicked this "save course" button.
->Action - Thanks react! i will dispatch an action so reducers that care can update state.
->Reducer - Ah, thanks action. I see you passed me the current state and the action to perform. i'll make a new copy of the state and return it.
->Store - Thanks for updating the satte reducer. i'll make sure that all connected components are aware.


->React-Redux - Woah, thanks for the new data Mr.store. I'll now intelligently determine if i should tell React about this change so that it only has to bother with updating the UI when necessary.


------------------
(*)Thunk
------------------

--> support async api call
--> a function which returns a function
--> anything impure is wrapped in thunk, later it called by middlware to actually cause the effect.
--> it has access to Store  